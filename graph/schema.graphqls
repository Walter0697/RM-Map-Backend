scalar Upload

input UserFilter {
  username: String
  role: String
}

input UserSearch {
  username: String!
}

type User {
  id: Int!
  username: String!
  role: String!
  created_at: String!
}

type UserPreference {
  id: Int!
  user: User
  relation: User
}

type Marker {
  id: Int!
  label: String!
  latitude: Float!
  longitude: Float!
  address: String!
  image_link: String
  link: String
  type: String!
  description: String
  estimate_time: String
  price: String
  status: String
  to_time: String
  from_time: String
  is_fav: Boolean!
  created_at: String!
  created_by: User!
  updated_at: String!
  updated_by: User!
}

type MarkerType {
  id: Int!
  label: String!
  value: String!
  priority: Int!
  icon_path: String!
  created_at: String!
  created_by: User!
  updated_at: String!
  updated_by: User!
}

type EventType {
  label: String!
  value: String!
  priority: Int!
  icon_path: String!
}

type Query {
  users(filter: UserFilter): [User]!
  usersearch(filter: UserSearch!): User
  preference: UserPreference
  markers: [Marker]!
  markertypes: [MarkerType]!
  eventtypes: [EventType]!
}

input NewUser {
  username: String!
  password: String!
  role: String!
}

input UpdateRelation {
  username: String!
}

input NewMarker {
  label: String!
  latitude: Float!
  longitude: Float!
  address: String!
  image_link: String
  image_upload: Upload
  link: String
  type: String!
  description: String
  to_time: String
  from_time: String
  estimate_time: String
  price: String
}

input UpdateMarkerFavourite {
  id: Int!
  is_fav: Boolean!
}

input newMarkerType {
  label: String!
  value: String!
  priority: Int!
  icon_upload: Upload
}

input updatedMarkerType {
  id: Int!
  label: String
  value: String
  priority: Int
  icon_upload: Upload
}

input removeModel {
  id: Int!
}

input Login {
  username: String!
  password: String!
}

type LoginResult {
  jwt: String!
  username: String!
}

type Mutation {
  createUser(input: NewUser!): String!
  updateRelation(input: UpdateRelation!): String!
  createMarker(input: NewMarker!): Marker!
  updateMarkerFav(input: UpdateMarkerFavourite!): Marker!
  createMarkerType(input: newMarkerType!): MarkerType!
  editMarkerType(input: updatedMarkerType!): MarkerType!
  removeMarkerType(input: removeModel!): String!
  login(input: Login!): LoginResult!
}